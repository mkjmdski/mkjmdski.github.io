<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Miko≈Çaj M≈Çodzikowski DevOps presentations</title>
    <link>https://mlodzikowski.pl/presentations/</link>
    <description>Recent content on Miko≈Çaj M≈Çodzikowski DevOps presentations</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://mlodzikowski.pl/presentations/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://mlodzikowski.pl/presentations/terraform/0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mlodzikowski.pl/presentations/terraform/0/</guid>
      <description>SysOps/DevOps Polska - Pozna≈Ñ #5  Miko≈Çaj M≈Çodzikowski</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mlodzikowski.pl/presentations/terraform/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mlodzikowski.pl/presentations/terraform/1/</guid>
      <description>root@sodo-meetup # whoami    My name is Miko, my interests are: lingustics, travels and programing  I&amp;rsquo;m going to start soon my career as a Build Automation Engineer, previously Java Developer and DevOps  
 root@sodo-meetup # uname -a    This presentations is focused on popularizing IaC approach using terraform as an example  Terraform will be broadly presented as a tool with mostly easy examples  Presentation is full of links, sources and referals so if you are interested in the topic - check out later the presentation online    root@sodo-meetup # terraform plan -out=introduction    Infrastructure as Code - short summary  Terraform features specification  HCL together with &amp;ldquo;${interpolation}&amp;rdquo;  Modules and community tools  Snippets!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mlodzikowski.pl/presentations/terraform/2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mlodzikowski.pl/presentations/terraform/2/</guid>
      <description>IaC Approach üìñ Wikipedia definiton:  Infrastructure as code (IaC) is the process of managing and provisioning computer data centers through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools.   A good starting article about IaC from thorntech  
Pros Operations:  Infrastructure is self-documentating by its code  Configuration can become part of Continuous Configuration Automation  Keeping IaC inside VCS: changes tracking, easier rollbacks and reviewing process</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mlodzikowski.pl/presentations/terraform/3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mlodzikowski.pl/presentations/terraform/3/</guid>
      <description>Facts about terraform  Is declarative -&amp;gt; tell what you want  Uses push configuration method  Communication is JSON based  Is extendable by plugins written in Golang   Digest of the providers set  Clouds: AWS, GCP, Azure, Alibaba, DigitalOcean, Heroku, OpenStack  Monitors: Datadog, Grafana, Icinga, New Relic, PagerDuty  Software: Docker, Nomad, Consul, Vault, Chef, Kubernetes  Networks: Cloudflare, DNS Servers, HTTP Requests  Databases, scripts, archives, vcs, many more&amp;hellip;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mlodzikowski.pl/presentations/terraform/4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mlodzikowski.pl/presentations/terraform/4/</guid>
      <description>HCL &amp;amp;&amp;amp; &amp;ldquo;${interpolation}&amp;rdquo;  HCL is compromise between human-friendly and machine-friendly configurations  HCL is fusion of complete programing languages and data structure languages  HCL is JSON-compatible - you can generate JSON and run it as HCL  HCL supports comments and &amp;lt;&amp;lt;EOF syntax for multiline strings.   Exact specification on the language can be found in the Hashicorps repository Data types  // vars: &amp;ldquo;${var.aws_account_number}&amp;rdquo; //(0.11) var.aws_account_number // (0.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mlodzikowski.pl/presentations/terraform/5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mlodzikowski.pl/presentations/terraform/5/</guid>
      <description>What are terraform modules  Modules are blackbox configuration in which only some set of parameters is provided in aim to create more complex infrastructure behind the scenes.  Modules usually have a set of outputs which can be referenced in your terraform file.  
Using modules  First source is official terraform registry  You can also find terraform modules on git repositories. There are plenty of them.  If you don&amp;rsquo;t feel satisfied you can always create your own modules and reference them as local files  Module is normal terraform project with: main.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mlodzikowski.pl/presentations/terraform/6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mlodzikowski.pl/presentations/terraform/6/</guid>
      <description>Thank you! online @ https://mlodzikowski.pl/presentations/terraform repo with snippets @ https://github.com/mkjmdski/terraform-examples Sources and helpful links to study terraform:  Jakub Ja≈Ñczak article  pointing terraform cons  Alexander Savchuk post  on CCA   Pavan Belagatti&amp;rsquo;s analyze  on popularity of terraform   Two articles about terraform on AWS: provisioning AWS  by Manisha Sahasrabudhe and terraform ECS cluster  by Tom Trahan  
More helpful links   Hashicrop webinars on YT   Introduction to terraform from Gruntwork.</description>
    </item>
    
  </channel>
</rss>